export function gcd(a:number,b:number){ a=Math.abs(a); b=Math.abs(b); while(b){ const t=b; b=a%b; a=t; } return a||1; }
export function reduce(n:number,d:number){ const g=gcd(n,d); return [n/g,d/g] as const; }
export function fmtFracSixteenths(n16:number){ const d=16, whole=Math.floor(n16/d), r=n16%d; if(r===0) return String(whole); const [n2,d2]=reduce(r,d); return (whole? (whole+' '):'') + n2+'/'+d2; }
export function parseUserFraction(input:string){ if(input==null) return null; let s=String(input).trim(); s=s.replace(/[″”"]/g,'"').replace(/"/g,''); s=s.replace(/\s*(?:in|inch|inches)\b/gi,'').trim(); const map:Record<string,string>={ '¼':'1/4','½':'1/2','¾':'3/4' }; s=s.replace(/[¼½¾]/g,ch=>map[ch]||ch); if(/^[+-]?(?:\d+)?\.\d+$/.test(s) || /^[+-]?\d+(?:\.\d+)?$/.test(s)){ const val=parseFloat(s), whole=Math.trunc(val), frac=val-whole, num16=Math.round(frac*16); return whole*16+num16; } let m=s.match(/^([+-]?\d+)[\s-]+(\d+)\/(\d+)$/); if(m){ const w=+m[1], n=+m[2], d=+m[3]; return w*16 + Math.round(n/d*16); } m=s.match(/^([+-]?\d+)\/(\d+)$/); if(m){ const n=+m[1], d=+m[2]; return Math.round(n/d*16); } return null; }
